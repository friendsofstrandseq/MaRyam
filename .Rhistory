k=1
chrSegs = seg[seg$chromosome == paste0("chr",k),]
if (nrow(chrSegs) < 2)
next()
i=224
start.bin.idx = chrSegs$breakpoint[i-1] + 1
end.bin.idx = chrSegs$breakpoint[i]
start.bin.idx
end.bin.idx
bin.size*(start.bin.idx)
bin.size*(end.bin.idx+1)
df = data.frame(chromosome = paste0("chr",k), start = bin.size*(start.bin.idx), end = bin.size*(end.bin.idx+1),stringsAsFactors = F)
df
subRows = (start.bin.idx:end.bin.idx)+1
subRows
i == nrow(chrSegs)
if (i == nrow(chrSegs))
{
subRows = subRows[1:(length(subRows)-1)]
}
df = cbind(df, t(as.data.frame(colSums(as.matrix(binRC[[k]][subRows, 4:ncol(binRC[[k]])])))))
df
rownames(df)  = NULL
segRC = data.frame()
segRC = rbind(segRC, df)
segRC
segCounts
i
i=225
segmentsCounts[223,]
start.bin.idx = chrSegs$breakpoint[i-1] + 1
end.bin.idx = chrSegs$breakpoint[i]
start.bin.idx
end.bin.idx
i
df = data.frame(chromosome = paste0("chr",k), start = bin.size*(start.bin.idx), end = bin.size*(end.bin.idx+1),stringsAsFactors = F)
subRows = (start.bin.idx:end.bin.idx)+1
subRows
if (i == nrow(chrSegs))
{
subRows = subRows[1:(length(subRows)-1)]
}
subRows
df = cbind(df, t(as.data.frame(colSums(as.matrix(binRC[[k]][subRows, 4:ncol(binRC[[k]])])))))
rownames(df)  = NULL
df
k
binRC[[k]][subRows,]
subRows
binRC[[k]][997,]
class(binRC[[1]])
length(which(is.na(binRC[[1]])))
binRC[[1]][997,]
RCfile <- binRCfile
counts = data.table::fread(paste("zcat", RCfile))
# newFormat is the table with all w counts first and then all the c counts
newFormat = data.table::dcast(counts, chrom + start + end ~ cell, value.var = c("w", "c"))
# exclude the extra chromosomes
newFormat <- newFormat[grepl('^chr[0-9XY][0-9]?$', newFormat$chrom),]
numcells = (ncol(newFormat)-3)/2
ord = NULL
for (i in 1:numcells) (ord = c(ord, i, i+numcells))
ord = c(1:3, ord + 3)
data.table::setcolorder(newFormat, ord)
# subset only autosomes
newFormat = newFormat[which(sapply(newFormat$chrom, chrNumber) < 23),]
# order the chromosomes numerically
rowOrder = order(sapply(newFormat$chrom, chrNumber))
newFormat = newFormat[rowOrder,]
#naming
colnames(newFormat)[1] = "chromosome"
colnames(newFormat)[4:ncol(newFormat)] = paste0(rep(c("W", "C"), numcells), ceiling(1:(numcells*2)/2))
cellNames = sapply(colnames(newFormat)[4:(numcells+3)], substr, start = 3, stop = sapply(colnames(newFormat)[4:(numcells+3)], nchar))
utils::write.table(cellNames, file = paste0(outputDir, bamNamesFile), quote = F, sep = "\n", row.names = F)
class(newFormat)
counts = data.table::fread(paste("zcat", RCfile))
# newFormat is the table with all w counts first and then all the c counts
newFormat = data.table::dcast(counts, chrom + start + end ~ cell, value.var = c("w", "c"))
class(newFormat)
dim(newFormat)
head(newFormat)
newFormat[224,]
newFormat[225,]
binRC[[1]][997,]
newFormat[997,]
class(newFormat)
length(which(is.na(newFormat)))
length(which(is.na(as.matrix(newFormat[,4:ncol(newFormat)]))))
segCounts
# exclude the extra chromosomes
newFormat <- newFormat[grepl('^chr[0-9XY][0-9]?$', newFormat$chrom),]
length(which(is.na(as.matrix(newFormat[,4:ncol(newFormat)]))))
numcells = (ncol(newFormat)-3)/2
ord = NULL
for (i in 1:numcells) (ord = c(ord, i, i+numcells))
ord = c(1:3, ord + 3)
data.table::setcolorder(newFormat, ord)
# subset only autosomes
newFormat = newFormat[which(sapply(newFormat$chrom, chrNumber) < 23),]
# order the chromosomes numerically
rowOrder = order(sapply(newFormat$chrom, chrNumber))
newFormat = newFormat[rowOrder,]
length(which(is.na(as.matrix(newFormat[,4:ncol(newFormat)]))))
newFormat <- changeRCformat(RCfile=binRCfile, outputDir, bamNamesFile = "bamNames.txt")
dim(newFormat)
binRC = splitChromosomes(newFormat)
class(binRC)
sum(sapply(binRC, nrow))
binRC[[1]][997,]
binRC[[1]][996,]
binRC[[1]][995,]
binRC[[1]][998,]
binRC[[1]][1,]
newFormat[997,]
length(newFormat$chromosome=="chr1")
length(which(newFormat$chromosome=="chr1"))
dim(binRC[[1]])
binRC[[1]][997,]
binRC[[1]][224,]
breakpointsFile <- BRfile
k=1
binRC[[1]][nrow(binRC[[1]]),]
chrSegs = seg[seg$chromosome == paste0("chr",k),]
seg = utils::read.table(breakpointsFile, stringsAsFactors = F, colClasses = c("integer", "character", "integer"), header = T)[,2:3]
colnames(seg) = c("chromosome", "breakpoint")
segRC = data.frame()
i==225
i=225
chrSegs = seg[seg$chromosome == paste0("chr",k),]
chrSegs
start.bin.idx = chrSegs$breakpoint[i-1] + 1
end.bin.idx = chrSegs$breakpoint[i]
start.bin.idx
bin.size
bin.size*(start.bin.idx)
bin.size*(end.bin.idx+1)
bin.size
chrSegs$breakpoint
start.bin.idx = chrSegs$breakpoint[i-1] + 1
end.bin.idx = chrSegs$breakpoint[i]
df = data.frame(chromosome = paste0("chr",k), start = bin.size*(start.bin.idx), end = bin.size*(end.bin.idx+1),stringsAsFactors = F)
subRows = (start.bin.idx:end.bin.idx)+1
if (i == nrow(chrSegs))
{
subRows = subRows[1:(length(subRows)-1)]
}
subRows
dim(binRC[[1]])
BRfile_all="/home/maryam/research/hackathons/data/HG00514/HG00514.500000_fixed.txt"
test <- read.table(BRfile_all, stringsAsFactors = F)
head(test)
test <- read.table(BRfile_all, stringsAsFactors = F, header = T)
class(test$start)
class(test$end)
dim(test)
a <- sort(test$end)
tail(a)
binRC[[1]][nrow(binRC[[1]]),]
end.bin.idx
nrow(binRC[[1]])
subRows = (start.bin.idx:end.bin.idx)+1
subRows
document()
SVcalling_wrapperFunc(bin.size, K, maximumCN, segmentsCounts, r, p, cellTypes, outputDir, haplotypeMode = haplotypeMode)
segmentsCounts = getSegReadCounts(binRC, BRfile, K, bin.size)
SVcalling_wrapperFunc(bin.size, K, maximumCN, segmentsCounts, r, p, cellTypes, outputDir, haplotypeMode = haplotypeMode)
head(binRC[[1]])
RCfile <- binRCfile
bamNamesFile = "bamNames.txt"
counts = data.table::fread(paste("zcat", RCfile))
# newFormat is the table with all w counts first and then all the c counts
newFormat = data.table::dcast(counts, chrom + start + end ~ cell, value.var = c("w", "c"))
# exclude the extra chromosomes
newFormat <- newFormat[grepl('^chr[0-9XY][0-9]?$', newFormat$chrom),]
numcells = (ncol(newFormat)-3)/2
ord = NULL
for (i in 1:numcells) (ord = c(ord, i, i+numcells))
ord = c(1:3, ord + 3)
counts = data.table::fread(paste("zcat", RCfile))
# newFormat is the table with all w counts first and then all the c counts
newFormat = data.table::dcast(counts, chrom + start + end ~ cell, value.var = c("w", "c"))
View(counts)
head(newFormat)
# exclude the extra chromosomes
newFormat <- newFormat[grepl('^chr[0-9XY][0-9]?$', newFormat$chrom),]
numcells = (ncol(newFormat)-3)/2
ord = NULL
numCells
length(unique(counts$cell))
ord = NULL
for (i in 1:numcells) (ord = c(ord, i, i+numcells))
ord
ord = c(1:3, ord + 3)
data.table::setcolorder(newFormat, ord)
counts = data.table::fread(paste("zcat", RCfile))
# newFormat is the table with all w counts first and then all the c counts
newFormat = data.table::dcast(counts, chrom + start + end ~ cell, value.var = c("w", "c"))
# exclude the extra chromosomes
newFormat <- newFormat[grepl('^chr[0-9XY][0-9]?$', newFormat$chrom),]
numcells = (ncol(newFormat)-3)/2
# get the order of the columns to have W and C counts of the single cells together
ord = NULL
for (i in 1:numcells) (ord = c(ord, i, i+numcells))
ord = c(1:3, ord + 3)
data.table::setcolorder(newFormat, ord)
# subset only autosomes
newFormat = newFormat[which(sapply(newFormat$chrom, chrNumber) < 23),]
# order the chromosomes numerically
rowOrder = order(sapply(newFormat$chrom, chrNumber))
newFormat = newFormat[rowOrder,]
rowOrder = order(sapply(newFormat$chrom, chrNumber))
newFormat = newFormat[rowOrder,]
colnames(newFormat)[1] = "chromosome"
colnames(newFormat)[4:ncol(newFormat)] = paste0(rep(c("W", "C"), numcells), ceiling(1:(numcells*2)/2))
cellNames = sapply(colnames(newFormat)[4:(numcells+3)], substr, start = 3, stop = sapply(colnames(newFormat)[4:(numcells+3)], nchar))
cellNames
colnames(newFormat)[1] = "chromosome"
colnames(newFormat)[4:ncol(newFormat)] = paste0(rep(c("W", "C"), numcells), ceiling(1:(numcells*2)/2))
cellNames = sapply(colnames(newFormat)[4:(numcells+3)], substr, start = 3, stop = sapply(colnames(newFormat)[4:(numcells+3)], nchar))
cellNames
colnames(newFormat)[4:ncol(newFormat)] = paste0(rep(c("W", "C"), numcells), ceiling(1:(numcells*2)/2))
colnames()
colNames
paste0(rep(c("W", "C"), numcells), ceiling(1:(numcells*2)/2))
sapply(colnames(newFormat)[4:(numcells+3)], substr, start = 3, stop = sapply(colnames(newFormat)[4:(numcells+3)], nchar))
unique(counts[,.(sample,cell)])
counts = data.table::fread(paste("zcat", RCfile))
# newFormat is the table with all w counts first and then all the c counts
newFormat = data.table::dcast(counts, chrom + start + end ~ cell, value.var = c("w", "c"))
newFormat
oldFormat = colnames(newFormat)[4:length(colnames(newFormat))]
oldFormat = colnames(newFormat)[4:length(colnames(newFormat))]
oldFormat
oldFormat[1:numCells]
substr(oldFormat[1:numCells],3)
substr(oldFormat[1:numCells],3,nchar(oldFormat[1:numCells]))
nchar(oldFormat[1:numCells])
3
oldColumOrder = substr(oldFormat[1:numCells],3,nchar(oldFormat[1:numCells]))
utils::write.table(oldColumOrder, file = paste0(outputDir, bamNamesFile), quote = F, sep = "\n", row.names = F)
write.table(oldColumOrder, file = paste0(outputDir, bamNamesFile), quote = F, sep = "\n", row.names = F)
oldColumOrder
outputDir
bamNamesFile
write.table(oldColumOrder, file = paste0(outputDir, bamNamesFile), quote = F, sep = "\n", row.names = F)
# subset only autosomes
newFormat = data.frame(cell_id = 1:numCells,
cell_name = newFormat[which(sapply(newFormat$chrom, chrNumber) < 23),])
oldColumOrder = data.frame(cell_id = 1:numcells,
cell_name = substr(oldFormat[1:numCells],3,nchar(oldFormat[1:numCells])))
oldColumOrder
utils::write.table(oldColumOrder, file = paste0(outputDir, bamNamesFile), quote = F, sep = "\n", row.names = F)
utils::write.table(oldColumOrder, file = paste0(outputDir, bamNamesFile), quote = F, sep = "\t", row.names = F)
write.table(oldColumOrder, file = paste0(outputDir, bamNamesFile), quote = F, sep = "\t", row.names = F)
length(binRC)
str(binRC)
cellTypes = changeCellTypesFormat(stateFile)
cellTypes
#cellType = read.table(cellType, stringsAsFactors = F, header = T)
d = data.table::fread(stateFile)
d = unique(d)
# adding two columns to the end including the start and end of chromosomes
d = merge(d, d[, .(chrom_start = min(start), chrom_end = max(end)), by = chrom], by = "chrom")
d
d[duplicated(chrom,sample,cell),]
duplicated(d[,.(chrom,sample,cell)])
d[duplicated(d[,.(chrom,sample,cell)]),]
d[cell == "HG00514_VI_048",]
#d %>% group_by(chrom) %>% summarize(chrom_start = min(start), chrom_end = max(end))
#merge(d, d %>% ..., by= "chrom")
d = d[start == chrom_start & end == chrom_end,]
d[cell == "HG00514_VI_048",]
?split
initail.binRC <- changeRCformat(binRCfile, outputDir)
dim(initail.binRC)
initial.binRC <- changeRCformat(binRCfile, outputDir)
fact <- as.factor(initial.binRC$chromosome, levels=unique(initail.binRC$chromosome))
fact <- factor(initial.binRC$chromosome, levels=unique(initail.binRC$chromosome))
fact
binRC2 <- split(initail.binRC, fact)
class(binRC2)
length(binRC2)
binRC2 == binRC
binRC2[[1]] == binRC[[1]]
length(which(binRC2[[1]] != binRC[[1]]))
sapply(1:22, function(x) length(which(binRC2[[x]] != binRC[[x]])))
s <- sapply(1:22, function(x) length(which(binRC2[[x]] != binRC[[x]])))
length(s)
f <- factor(initial.binRC$chromosome)#, levels=unique(initail.binRC$chromosome))
f
f <- factor(initial.binRC$chromosome, levels=unique(initail.binRC$chromosome))
f
binRC <- split(initail.binRC, fact)
binRC <- split(initail.binRC, f)
binRC
d = data.table::fread(stateFile)
d = unique(d)
# adding two columns to the end including the start and end of chromosomes
d = merge(d, d[, .(chrom_start = min(start), chrom_end = max(end)), by = chrom], by = "chrom")
# kick out the SCE cells
d = d[start == chrom_start & end == chrom_end,]
x = data.table::dcast(d, chrom + start + end ~ sample + cell, value.var = "class")
class(x)
names(x)
bamNamesFile
oldColumOrder
getwd()
document()
l <- changeRCformat(binRCfile, outputDir)
document()
l <- changeRCformat(binRCfile, outputDir)
l
cellNames <- l$cellNames
initial.binRC <- l$binRC
f <- factor(initial.binRC$chromosome, levels=unique(initail.binRC$chromosome))
binRC <- split(initail.binRC, f)
x
# order the columns based on the order of the cellNames
names <- colnames(x)[4:ncol(x)]
length(names)
names
cellNames
document()
l <- changeRCformat(binRCfile, outputDir)
cellNames <- l$cellNames
initial.binRC <- l$binRC
f <- factor(initial.binRC$chromosome, levels=unique(initail.binRC$chromosome))
binRC <- split(initail.binRC, f)
cellNames
?index
?match
match(names, cellNames)
names
d = data.table::fread(stateFile)
d = unique(d)
# adding two columns to the end including the start and end of chromosomes
d = merge(d, d[, .(chrom_start = min(start), chrom_end = max(end)), by = chrom], by = "chrom")
# kick out the SCE cells
d = d[start == chrom_start & end == chrom_end,]
x = data.table::dcast(d, chrom + start + end ~ cell, value.var = "class")
colnames(x)
match(names, cellNames)
# order the columns based on the order of the cellNames
names <- colnames(x)[4:ncol(x)]
match(names, cellNames)
# order the columns based on the order of the cellNames
names <- colnames(x)[4:ncol(x)]
match(cellNames, names)
trueNames <- c("a","b","c")
falseNames <- c("b", "a", "c")
trueNames <- c(1,2,3,"a","b","c")
falseNames <- c(1,2,3,"b", "a", "c")
names = falseNames[4:ncol(falseNames)]
names = falseNames[4:ncols(falseNames)]
names = falseNames[4:length(falseNames)]
names
cellNames = trueNames
trueNames <- c("a", "b", "c")
letters[1:3]
m <- match(trueNames, names)
m
falseNames <- falseNames[c(1:3, m+3)]
falseNames
set(cellNames)
unique(sort(d$cell))
# order the columns based on the order of the cellNames
assert_that(unique(sort(d$cell)) == unique(sort(cellNames)))
# order the columns based on the order of the cellNames
stopifnot(unique(sort(d$cell)) == unique(sort(cellNames)))
unique(sort(d$cell))
unique(sort(cellNames))
document()
l <- changeRCformat(binRCfile, outputDir)
cellNames <- l$cellNames
initial.binRC <- l$binRC
f <- factor(initial.binRC$chromosome, levels=unique(initail.binRC$chromosome))
binRC <- split(initail.binRC, f)
cellTypes = changeCellTypesFormat(stateFile, cellNames)
library(devtools)
install_git("git://github.com/friendsofstrandseq/MaRyam.git", branch = "master")
library("MaRyam")
binRCfile="/home/maryam/research/hackathons/data/HG00514/HG00514.500000_fixed.txt.gz"
BRfile="/home/maryam/research/hackathons/data/HG00514/HG00514.500000_fixed.many.txt"
infoFile="/home/maryam/research/hackathons/data/HG00514/HG00514.500000_fixed.info"
stateFile="/home/maryam/research/hackathons/data/HG00514/HG00514.final.txt"
outputDir="/home/maryam/research/hackathons/data/HG00514/"
bin.size=500000
K=22
maximumCN=4
l <- changeRCformat(binRCfile, outputDir)
cellNames <- l$cellNames
initial.binRC <- l$binRC
f <- factor(initial.binRC$chromosome, levels=unique(initail.binRC$chromosome))
binRC <- split(initail.binRC, f)
cellTypes = changeCellTypesFormat(stateFile, cellNames)
d = data.table::fread(stateFile)
d = unique(d)
# adding two columns to the end including the start and end of chromosomes
d = merge(d, d[, .(chrom_start = min(start), chrom_end = max(end)), by = chrom], by = "chrom")
# kick out the SCE cells
d = d[start == chrom_start & end == chrom_end,]
x = data.table::dcast(d, chrom + start + end ~ cell, value.var = "class")
# make sure if all cells are reported
stopifnot(unique(sort(d$cell)) == unique(sort(cellNames)))
# order the columns based on the order of the cellNames
names <- colnames(x)[4:ncol(x)]
m <- match(cellNames, names)
x <- x[,c(1:3, m+3)]
# exclude the extra chromosomes
x <- x[grepl('^chr[0-9XY][0-9]?$', x$chrom),]
x
d = data.table::fread(stateFile)
d = unique(d)
# adding two columns to the end including the start and end of chromosomes
d = merge(d, d[, .(chrom_start = min(start), chrom_end = max(end)), by = chrom], by = "chrom")
# kick out the SCE cells
d = d[start == chrom_start & end == chrom_end,]
x = data.table::dcast(d, chrom + start + end ~ cell, value.var = "class")
# make sure if all cells are reported
stopifnot(unique(sort(d$cell)) == unique(sort(cellNames)))
# order the columns based on the order of the cellNames
names <- colnames(x)[4:ncol(x)]
m <- match(cellNames, names)
x
c(1:3, m+3)
x[,c(1:3, m+3)]
x <- x[,c(1:3, m+3),with = F]
x
x <- x[,c(1:3, m+3),with = F]
x
document()
cellTypes = changeCellTypesFormat(stateFile, cellNames)
library(devtools)
install_git("git://github.com/friendsofstrandseq/MaRyam.git", branch = "master")
library("MaRyam")
l <- changeRCformat(binRCfile, outputDir)
cellNames <- l$cellNames
initial.binRC <- l$binRC
f <- factor(initial.binRC$chromosome, levels=unique(initail.binRC$chromosome))
binRC <- split(initail.binRC, f)
cellTypes = changeCellTypesFormat(stateFile, cellNames)
cellTypes
document()
document()
info = data.table::fread(infoFile)
p = info$nb_p[1]
r = info$nb_r
r
info
numCells
numcells
info = data.table::fread(infoFile)
head(info)
info$cell
length(info$cell)
library(devtools)
install_git("git://github.com/friendsofstrandseq/MaRyam.git", branch = "master")
library("MaRyam")
binRCfile="/home/maryam/research/hackathons/data/HG00514/HG00514.500000_fixed.txt.gz"
BRfile="/home/maryam/research/hackathons/data/HG00514/HG00514.500000_fixed.many.txt"
infoFile="/home/maryam/research/hackathons/data/HG00514/HG00514.500000_fixed.info"
stateFile="/home/maryam/research/hackathons/data/HG00514/HG00514.final.txt"
outputDir="/home/maryam/research/hackathons/data/HG00514/"
bin.size=500000
K=22
maximumCN=4
l <- changeRCformat(binRCfile, outputDir)
cellNames <- l$cellNames
initial.binRC <- l$binRC
f <- factor(initial.binRC$chromosome, levels=unique(initail.binRC$chromosome))
binRC <- split(initial.binRC, f)
f <- factor(initial.binRC$chromosome, levels=unique(initail.binRC$chromosome))
initial.binRC <- l$binRC
f <- factor(initial.binRC$chromosome, levels=unique(initail.binRC$chromosome))
f <- factor(initial.binRC$chromosome, levels=unique(initial.binRC$chromosome))
binRC <- split(initial.binRC, f)
cellTypes = changeCellTypesFormat(stateFile, cellNames)
NBparams = changeNBparamsFormat(infoFile, K)
p = NBparams[[1]]
r = NBparams[[2]]
segmentsCounts = getSegReadCounts(binRC, BRfile, K, bin.size)
SVcalling_wrapperFunc(bin.size, K, maximumCN, segmentsCounts, r, p, cellTypes, outputDir, haplotypeMode = haplotypeMode)
haplotypeMode=F
SVcalling_wrapperFunc(bin.size, K, maximumCN, segmentsCounts, r, p, cellTypes, outputDir, haplotypeMode = haplotypeMode)
info = data.table::fread(infoFile)
# order the columns based on the order of the cellNames
m <- match(cellNames, info$cells)
m
cellNma
cellNames
# order the columns based on the order of the cellNames
m <- match(cellNames, info$cell)
m
info$cell
info <- info[m,]
info = data.table::fread(infoFile)
# order the columns based on the order of the cellNames
m <- match(cellNames, info$cell)
info <- info[m,]
cellNames
info$cell
getwd()
document()
l <- changeRCformat(binRCfile, outputDir)
cellNames <- l$cellNames
initial.binRC <- l$binRC
f <- factor(initial.binRC$chromosome, levels=unique(initial.binRC$chromosome))
binRC <- split(initial.binRC, f)
cellTypes = changeCellTypesFormat(stateFile, cellNames)
NBparams = changeNBparamsFormat(infoFile, K, cellNames)
# make sure if all cells are reported
stopifnot(unique(sort(info$cell)) == unique(sort(cellNames)))
